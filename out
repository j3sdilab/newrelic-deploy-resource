#!/bin/sh

set -e
exec 3>&1
exec 1>&2

# for jq
PATH=/usr/local/bin:$PATH

inputs=$(mktemp /tmp/resource-in.XXXXXX)

cat > $inputs <&0

api_key=$(jq -r '.source.api_key' < $inputs)

user=$(jq -r '(.params.user // empty)' < $inputs)

revision=$(jq -r '(.version.ref // empty)' < $inputs)
if [ -z "$ref" ] echo "Version Reference is not available" && exit 1

app_name=$(jq -r '(.params.app_name // empty)' < $inputs)
if [ -z "$app_name" ] echo "New Relic Application Name can not be empty" && exit 1

app_id=$(curl -sb -X GET 'https://api.newrelic.com/v2/applications.json' -H "X-Api-Key:${api_key}"  -d "filter[name]=${app_name}" | jq -c '.applications[].id')
if [ -z "$app_id" ] echo "Can't find given New Relic Application Name" && exit 1

body=$(jq -c -n \
	--arg revision "${revision}" \
	'{
		deployment: {
			revision: $revision
		}
	}'
)

RESPONSE=$(curl -X POST "https://api.newrelic.com/v2/applications/${app_id}/deployments.json" \
     -H "X-Api-Key:${api_key}" -i \
     -H "Content-Type: application/json" \
     -d ${body})



STATUS=$(echo $RESPONSE | grep HTTP |  awk '{print $2}')

if [ "$STATUS" -ne "200" ] && [ "$STATUS" -ne "201" ]; then
  echo $RESPONSE
  exit 1;
fi


jq -n \
    --arg ts $(date +%s) \
    --arg revision "${revision}" \
    '{
        version: {
            timestamp: $ts
        },
        metadata: [
            {name: "revision", value: $revision}
        ]
    }' >&3